{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>I like to drink  after I played </p>"},{"location":"AboutThis%20Project/","title":"AboutThis Project","text":""},{"location":"AboutThis%20Project/#testing-document-using-github-pages","title":"TESTING DOCUMENT USING GITHUB PAGES","text":""},{"location":"AboutThis%20Project/#_1","title":"AboutThis Project","text":""},{"location":"AboutThis%20Project/#project-overview","title":"Project Overview","text":"<p>This project outlines the step-by-step process of setting up a CI/CD pipeline using GitHub Actions. The project demonstrates how to automate the build, test, and deployment of an application to Kubernetes using tools like Docker, Trivy, SonarQube, and Terraform. The project also highlights the integration of AWS role for managing cloud resources and Kubernetes clusters.</p>"},{"location":"AboutThis%20Project/#prerequisites","title":"Prerequisites","text":"<p>Before diving into this project, here are some skills and tools you should be familiar with:</p> <ul> <li>Terraform installed on your machine.</li> <li>A GitHub account.</li> <li>A GitHub personal access token with the necessary permissions to create repositories.</li> </ul> <p>\u26a0\ufe0f Important: </p> <ol> <li>Make sure First you will create a <code>.pem</code> key manually from the AWS console. i.e \"MYLABKEY.pem\" because it will be used for creating <code>EC2</code> VMs and <code>EKS cluster</code>.</li> <li>Copy <code>MYLABKEY.pem</code> in the terraform directory (<code>01.Code_IAC_Selfhosted-Runner-and-Trivy</code> and <code>03.Code_IAC_Terraform_box</code> ) as below your terraform code</li> <li>Generate the Github Token <pre><code>ls \n\\Learning_GitHub_Action\\01.Github_Action_DevOps-Project\\Terraform_Code_Infra_setup\n\n\nMode                 LastWriteTime         Length Name                                                                                                                                                                                              \n----                 -------------         ------ ----                                                                                                                                                                                              \ndar--l          17/04/25  12:48 PM                .terraform                                                                                                                                                                                        \ndar--l          21/04/25  12:34 PM                00.Code_IAC-github-repo                                                                                                                                                                           \ndar--l          21/04/25  12:34 PM                01.Code_IAC_Selfhosted-Runner-and-Trivy                                                                                                                                                           \ndar--l          21/04/25   1:38 PM                02.Code_IAC_SonarQube                                                                                                                                                                             \ndar--l          21/04/25  12:34 PM                03.Code_IAC_Terraform_box                                                                                                                                                                         \n-a---l          20/08/24   1:45 PM            493 .gitignore                                                                                                                                                                                                                                                                                                                                    \n-a---l          21/04/25   1:59 PM          18225 AboutThis Project.md                                                                                                                                                                              \n-a---l          19/04/25   8:48 PM           1309 main.tf                                                                                  \n````\n\n- [Clone repository for terraform code](https://github.com/mrbalraj007/Learning_GitHub_Action/tree/main/01.Github_Action_DevOps-Project/Terraform_Code_Infra_setup)&lt;br&gt;\n  &gt; \ud83d\udca1 **Note:** Replace GitHub Token, resource names and variables as per your requirement in terraform code\n  &gt; - For **`github Repo`** Token value to be updated in file \n      - `00.Code_IAC-github-repo/variables.tf` (i.e default- ```xxxxxx```*)\n  &gt; - **For EC2 VM** \n      - `01.Code_IAC_Selfhosted-Runner-and-Trivy/main.tf` (i.e keyname- ```MYLABKEY```*)\n      - `03.Code_IAC_Terraform_box/main.tf` (i.e keyname- ```MYLABKEY```*)\n  &gt; - For **Cluster name** \n      - `03.Code_IAC_Terraform_box/k8s_setup_file/main.tf` (i.e ```balraj```*).\n  &gt; - For **Node Pod**\n      - `03.Code_IAC_Terraform_box/k8s_setup_file/variable.tf` (i.e ```MYLABKEY```*)\n\n\n- **Set up your GitHub token**:\n   - Create a new GitHub personal access token with the `repo` scope at https://github.com/settings/tokens. \n   - Then set it as an environment variable (DO NOT commit your token to version control):\n\n   ```bash\n   # For Linux/macOS\n   export GITHUB_TOKEN=your_github_token\n\n   # For Windows Command Prompt\n   set GITHUB_TOKEN=your_github_token\n\n   # For Windows PowerShell (I used this one)\n   # $env:GITHUB_TOKEN=\"your_github_token\"\n   $env:TF_VAR_github_token = \"your-github-personal-access-token\"\n   ```\n- **Test and verify with curl again in powershell terminal:**\n   ```powershell\n   $headers = @{\n    Authorization = \"token $env:TF_VAR_github_token\"\n   }\n   Invoke-WebRequest -Uri \"https://api.github.com/user\" -Headers $headers\n   ```\n   - You should see your GitHub user info in JSON, **not** \"Bad credentials\".\n---\n\n## **Key Points**\n1. **GitHub Actions Overview**:\n   - GitHub Actions is used as the CI/CD tool for this project.\n   - It eliminates the need for setting up and maintaining Jenkins servers by providing managed runners.\n\n2. **Pipeline Stages**:\n   - **Compile**: Builds the application.\n   - **Security Checks**: Scans for vulnerabilities using Trivy and GitLeaks.\n   - **Unit Testing**: Executes test cases to ensure code quality.\n   - **Build and Publish Docker Image**: Builds a Docker image and uploads it as an artifact.\n   - **Deploy to Kubernetes**: Deploys the application to an EKS cluster using Terraform.\n\n3. **Tools and Technologies Used**:\n   - **GitHub Actions**: CI/CD automation.\n   - **Docker**: Containerization of the application.\n   - **Trivy**: Security scanning for vulnerabilities.\n   - **GitLeaks**: Detects hardcoded secrets in the source code.\n   - **SonarQube**: Code quality analysis.\n   - **AWS CLI**: Manages AWS resources.\n   - **Terraform**: Infrastructure as Code (IaC) for provisioning EKS clusters.\n   - **Kubernetes**: Orchestrates containerized applications.\n\n4. **Why Use This Project**:\n   - Automates the software delivery process.\n   - Ensures code quality and security through automated checks.\n   - Simplifies deployment to Kubernetes clusters.\n   - Demonstrates best practices for CI/CD pipelines.\n\n5. **Takeaways**:\n   - Understanding of GitHub Actions and its capabilities.\n   - Hands-on experience with integrating security tools like Trivy and GitLeaks.\n   - Knowledge of deploying applications to Kubernetes using Terraform.\n   - Insights into managing AWS resources with AWS CLI.\n\n---\n\n## **Step-by-Step Process**\n\n### &lt;span style=\"color: Yellow;\"&gt;Setting Up the Infrastructure &lt;/span&gt;\n\nI have created a Terraform code to set up the entire infrastructure, including the installation of required applications, tools, and the EKS cluster automatically created.\n- &amp;rArr;&lt;span style=\"color: brown;\"&gt; Docker Install\n- &amp;rArr;&lt;span style=\"color: brown;\"&gt; SonarQube Install\n- &amp;rArr;&lt;span style=\"color: brown;\"&gt; Trivy Install\n- &amp;rArr;&lt;span style=\"color: brown;\"&gt; Terraform Install\n- &amp;rArr;&lt;span style=\"color: brown;\"&gt; EKS Cluster Setup\n\n&gt; \ud83d\udca1 **Note:**  &amp;rArr;&lt;span style=\"color: Green;\"&gt; ```EKS cluster``` creation will take approx. 10 to 15 minutes.\n&gt; \n#### &lt;span style=\"color: Yellow;\"&gt; To Create EC2 Instances\n\nFirst, we'll create the necessary virtual machines using ```terraform``` code. \n\nBelow is a terraform Code:\n\nOnce you [clone repo](https://github.com/mrbalraj007/Learning_GitHub_Action/blob/main/01.Github_Action_DevOps-Project/Terraform_Code_Infra_setup) then go to folder *&lt;span style=\"color: cyan;\"&gt;\"01.Github_Action_DevOps-Project/Terraform_Code_Infra_setup\"&lt;/span&gt;* and run the terraform command.\n```bash\ncd 01.Github_Action_DevOps-Project/Terraform_Code_Infra_setup\n\n$ ls\n\n 00.Code_IAC-github-repo/   01.Code_IAC_Selfhosted-Runner-and-Trivy/   02.Code_IAC_SonarQube/   03.Code_IAC_Terraform_box/  'AboutThis Project.md'   main.tf   \n</code></pre></li> </ol> <p>\ud83d\udca1 Note:  \u21d2 Make sure to run <code>main.tf</code> which is located outside of the folder. I have created the code in such a way that a single file will call all of the folders.</p> <p><pre><code> ls -la\ntotal 72\n-rw-r--r-- 1 bsingh 1049089   493 Aug 20  2024  .gitignore\ndrwxr-xr-x 1 bsingh 1049089     0 Apr 21 12:34  00.Code_IAC-github-repo/\ndrwxr-xr-x 1 bsingh 1049089     0 Apr 21 12:34  01.Code_IAC_Selfhosted-Runner-and-Trivy/\ndrwxr-xr-x 1 bsingh 1049089     0 Apr 21 13:38  02.Code_IAC_SonarQube/\ndrwxr-xr-x 1 bsingh 1049089     0 Apr 21 12:34  03.Code_IAC_Terraform_box/\n-rw-r--r-- 1 bsingh 1049089 21284 Apr 21 14:44 'AboutThis Project.md'\n-rw-r--r-- 1 bsingh 1049089  1309 Apr 19 20:48  main.tf\n</code></pre> You need to run <code>main.tf</code> file using following terraform command.</p> <p>Now, run the following command. <pre><code>terraform init\nterraform fmt\nterraform validate\nterraform plan\nterraform apply \n# Optional &lt;terraform apply --auto-approve&gt;\n</code></pre></p> <p></p> <p>Once you run the terraform command, then we will verify the following things to make sure everything is setup properly via a terraform.</p>"},{"location":"AboutThis%20Project/#inspect-the-cloud-init-logs","title":"Inspect the <code>Cloud-Init</code> logs:","text":"<p>Once connected to EC2 instance then you can check the status of the <code>user_data</code> script by inspecting the log files. <pre><code># Primary log file for cloud-init\nsudo tail -f /var/log/cloud-init-output.log\n                    or \nsudo cat /var/log/cloud-init-output.log | more\n</code></pre></p> <p>\ud83d\udd0d- If the user_data script runs successfully, you will see output logs and any errors encountered during execution.</p> <p>\ud83d\udd0d- If there\u2019s an error, this log will provide clues about what failed.</p> <ul> <li>Verify the Outcome of \"<code>cloud-init-output.log</code>\"</li> </ul>"},{"location":"AboutThis%20Project/#verify-the-installation","title":"Verify the Installation <ul> <li> <p>[x]  Docker version <pre><code>ubuntu@ip-172-31-95-197:~$ docker --version\nDocker version 24.0.7, build 24.0.7-0ubuntu4.1\n\n\ndocker ps -a\nubuntu@ip-172-31-94-25:~$ docker ps\n</code></pre>  <li> <p>[x]  trivy version <pre><code>ubuntu@ip-172-31-89-97:~$ trivy version\nVersion: 0.55.2\n</code></pre>  <li>[x]  Terraform version <pre><code>ubuntu@ip-172-31-89-97:~$ terraform version\nTerraform v1.9.6\non linux_amd64\n</code></pre> <li>[x]  eksctl version <pre><code>ubuntu@ip-172-31-89-97:~$ eksctl version\n0.191.0\n</code></pre> <li>[x]  kubectl version <pre><code>ubuntu@ip-172-31-89-97:~$ kubectl version\nClient Version: v1.31.1\nKustomize Version: v5.4.2\n</code></pre> <li>[x]  aws cli version <pre><code>ubuntu@ip-172-31-89-97:~$ aws version\nusage: aws [options] &lt;command&gt; &lt;subcommand&gt; [&lt;subcommand&gt; ...] [parameters]\nTo see help text, you can run:\n  aws help\n  aws &lt;command&gt; help\n  aws &lt;command&gt; &lt;subcommand&gt; help\n</code></pre>","text":""},{"location":"AboutThis%20Project/#verify-the-eks-cluster-installation","title":"Verify the EKS Cluster installation <ul> <li>Will take a putty session of from Terraform EC2</li> <li>On the <code>terraform</code> virtual machine, Go to directory <code>k8s_setup_file</code> and open the file <code>cat apply.log</code> to verify the cluster is created or not.</li> <li>Will verify the cluster status from </li> <li><code>sudo cat /var/log/cloud-init-output.log | more</code> or </li> <li><code>cat /home/ubuntu/k8s_setup_file/apply.log</code></li> </ul> <p><pre><code>ubuntu@ip-172-31-90-126:~/k8s_setup_file$ pwd\n/home/ubuntu/k8s_setup_file\nubuntu@ip-172-31-90-126:~/k8s_setup_file$ cd ..\n</code></pre> </p> <ul> <li>After Terraform deploys on the instance, now it's time to setup the cluster. If you logout the ssh session then reconnect the SSH and run to following command:</li> </ul> <p><pre><code>aws eks update-kubeconfig --name &lt;cluster-name&gt; --region \n&lt;region&gt;\n</code></pre> - Once EKS cluster is setup then need to run the following command to make it intract with EKS.</p> <p><pre><code>aws eks update-kubeconfig --name balraj-cluster --region us-east-1\n</code></pre> </p>   <p>\u26a0\ufe0f Important:  The <code>aws eks update-kubeconfig</code> command is used to configure your local kubectl tool to interact with an Amazon EKS (Elastic Kubernetes Service) cluster. It updates or creates a kubeconfig file that contains the necessary authentication information to allow kubectl to communicate with your specified EKS cluster.</p> <p> What happens when you run this command: The AWS CLI retrieves the required connection information for the EKS cluster (such as the API server endpoint and certificate) and updates the kubeconfig file located at <code>~/.kube/config (by default)</code>. It configures the authentication details needed to connect kubectl to your EKS cluster using IAM roles. After running this command, you will be able to interact with your EKS cluster using kubectl commands, such as <code>kubectl get nodes</code> or <code>kubectl get pods</code>.</p>   <p><pre><code>kubectl get nodes\nkubectl cluster-info\nkubectl config get-contexts\n</code></pre>  </p>","text":""},{"location":"AboutThis%20Project/#verify-github-repo-and-github-actions","title":"Verify GitHub Repo and GitHub Actions <ul> <li>Verify GitHub repository created and initialize it because we are using terraform.       </li> <li>Verify a <code>.github/workflows</code> directory created along with two YAML file for the pipeline.       </li> </ul>","text":""},{"location":"AboutThis%20Project/#adding-a-virtual-machine-as-a-runner","title":"Adding a Virtual Machine as a Runner <ul> <li>I'll be using self-hosted runner to execute all the pipeline.</li> <li>Configure the runner by following the commands provided in GitHub's settings.       <pre><code>   Go to \"GithubAction_DevOps_Projects\"\n   Click on settings\n   then select the actions and choose \"runners\"\n</code></pre> </li> <li>Click on new <code>self-hosted runner</code> and select <code>Linux</code></li> <li>Notedown the token value somewhere as we need to in runner VM.    </li> <li>Take putty session of <code>runner</code> EC2</li> <li>Go to <code>actions-runner</code> folder       </li> <li>Update/Paste the token value here as mentioned in screenshot.       </li> <li>Change the execution mode for script and run it.</li> <li><code>chmod +x selfhost-runner.sh</code></li> </ul>  <p>\ud83d\udca1 Note: </p>  <p>Take note of the token value from here and paste it into the script in runner at the following spot. This ensures that the script executes successfully with the necessary permissions. Once you've finished, save your modifications and run the script to test whether it works as planned.</p>","text":""},{"location":"AboutThis%20Project/#troubleshooting","title":"Troubleshooting:","text":"<ul> <li>I am getting below error message while execute the file. </li> </ul>"},{"location":"AboutThis%20Project/#fixsolution","title":"Fix/Solution:","text":"<ul> <li>I try explicitly invoking the bash interpreter:    <pre><code>bash ./selfhost-runner.sh\n</code></pre></li> <li>The solution is to remove these carriage return characters using the dos2unix command:</li> <li>Install dos2unix if you haven't already:    <pre><code>sudo apt-get update\nsudo apt-get install dos2unix\n</code></pre></li> <li>Run <code>dos2unix</code> on <code>selfhost-runner.sh</code> script:    <pre><code>dos2unix selfhost-runner.sh\n</code></pre></li> <li>Try running the script again:    <pre><code>./selfhost-runner.sh\n</code></pre> <p>\ud83d\udca1 Idea: This should now execute correctly because the problematic carriage return characters will have been removed</p> </li> </ul> <p>It works :-) and I am able to execute the file.  </p>"},{"location":"AboutThis%20Project/#setup-sonarqube","title":"Setup SonarQube  <ul> <li>Go to SonarQube EC2 and notedown the Public IPAddress and open a new browser.</li> <li>Access SonarQube via <code>http://&lt;your-server-ip&gt;:9000</code>.   <p>\ud83d\udca1 Note: When you access the above URl then it will be promot for login. Use the \"<code>admin/admin</code>\" for first time login and will prompt for change the password Once you change the password, make sure to create a strong and secure one that you can remember. Afterward, you will have full access to the system's features and settings.</p>  </li> </ul>","text":""},{"location":"AboutThis%20Project/#create-a-token-in-sonarqube","title":"Create a token in SonarQube <ul> <li>Go to <code>Administration</code>&gt;<code>Security</code>&gt;<code>Users</code>&gt;Create a new token</li> </ul>","text":""},{"location":"AboutThis%20Project/#configure-secrets-and-variables-in-github-repo","title":"Configure Secrets and Variables in GitHub Repo. <p><pre><code>Go to Repo `GithubAction_DevOps_Projects`\nClick on `settings`\nClick on `Secrets and Variables`\nSelect `Actions`.\n</code></pre>  </p>  <p>\ud83d\udca1 Note: </p>  <p>You have to update all the required tokens and secrets value here. Part of Terraform code, I have already created a dummy values, which needs to be replaced. Once you have replaced the dummy values with the actual tokens and secrets, ensure that you test the configuration thoroughly to confirm that everything functions as expected. This will help prevent any issues during deployment and maintain the integrity of your infrastructure.</p>   <ul> <li> <p>To Update Sonar URL </p> </li> <li> <p>To update the <code>EKS_KUBECONFIG</code> secret</p> </li> <li>Take putty session of Terraform EC2 instnace</li> <li>run the command <code>cat ~/.kube/config</code></li> <li>copy the whole content and paste into the secret.</li> </ul>","text":""},{"location":"AboutThis%20Project/#attach-role-to-runner-ec2","title":"Attach Role to Runner EC2 <ul> <li>Select the EC2 VM and click on the <code>actions</code> &gt; <code>security</code>&gt;<code>Mofify IAM Roles on the runner</code>.    </li> <li>Select the role <code>Role_k8_Cluster_profile</code> </li> <li>Click on update IAM Role.</li> </ul>","text":""},{"location":"AboutThis%20Project/#writing-the-cicd-pipeline","title":"Writing the CI/CD Pipeline <ul> <li>Compile Stage:<ul> <li>Use <code>actions/checkout</code> to clone the repository.</li> <li>Set up the required environment (e.g., JDK 17 for Java projects).</li> <li>Compile the application using build tools like Maven.</li> </ul> </li> <li>Security Checks:<ul> <li>Install and run Trivy to scan for vulnerabilities in Docker images.</li> <li>Use GitLeaks to detect hardcoded secrets in the source code.</li> </ul> </li> <li>Unit Testing:<ul> <li>Execute test cases to validate the application.</li> </ul> </li> <li>Build and Publish Docker Image:<ul> <li>Build a Docker image using <code>docker build</code>.</li> <li>Push the image to a container registry or upload it as an artifact.</li> </ul> </li> <li>Deploy to Kubernetes:<ul> <li>Use Terraform to provision an EKS cluster.</li> <li>Deploy the application using Kubernetes manifests.</li> </ul> </li> </ul>  <ul> <li>Here is the complete CICD- Pipeline details</li> </ul>","text":""},{"location":"AboutThis%20Project/#verify-the-docker-image","title":"Verify the Docker Image","text":""},{"location":"AboutThis%20Project/#verify-code-coverage-in-sonarqube","title":"Verify code coverage in SonarQube","text":""},{"location":"AboutThis%20Project/#verify-pipeline-status","title":"Verify pipeline Status","text":""},{"location":"AboutThis%20Project/#verify-the-pods-in-runner-vm","title":"Verify the pods in runner VM","text":""},{"location":"AboutThis%20Project/#verify-application-status","title":"Verify Application Status","text":""},{"location":"AboutThis%20Project/#_2","title":"AboutThis Project","text":""},{"location":"AboutThis%20Project/#environment-cleanup","title":"Environment Cleanup: <ul> <li>Following resouces are created as pert of this project.  </li> </ul>","text":""},{"location":"AboutThis%20Project/#to-delete-deployment","title":"To delete deployment: <ul> <li> <p>I've created a <code>Github Action</code> to destroy the Kubernetes <code>deployment</code> and <code>services</code>.    </p> </li> <li> <p>Delete all deployment/Service: </p> <ul> <li> <p>In github action, and click on the second pipeline to delete the deployment and service.     </p> </li> <li> <p>Here is the complete CICD- Pipeline to destroy Deployment and Services</p> </li> </ul> </li> </ul>","text":""},{"location":"AboutThis%20Project/#to-delete-aws-eks-cluster","title":"To delete <code>AWS EKS cluster</code> <ul> <li>Login into the <code>Terraform EC2</code>instance and change the directory to /<code>k8s_setup_file</code>, and run the following command to delete the cluster.<ul> <li><code>sh      sudo su - ubuntu      cd /k8s_setup_file      sudo terraform destroy --auto-approve</code></li> </ul> </li> </ul>","text":""},{"location":"AboutThis%20Project/#troubleshooting_1","title":"Troubleshooting: <ul> <li>I am getting below error message while running the <code>Terraform destroy</code>.    </li> </ul>","text":""},{"location":"AboutThis%20Project/#fixsolution_1","title":"Fix/Solution:","text":"<ul> <li>I noticed that permission is set to root for terraform dirctory. we have to take ownership first and then try to delete it. </li> <li>Run the following command to take ownership    <pre><code>sudo chown -R ubuntu:ubuntu /home/ubuntu/k8s_setup_file/.terraform*\n</code></pre></li> <li>I was still getting error message while runing the desrtoy    </li> <li>I ran the following command again for entire terraform folder.    <pre><code>sudo chown -R ubuntu:ubuntu /home/ubuntu/k8s_setup_file/terraform*\n</code></pre></li> <li>Rerun the destroy command and this time it works :-) </li> </ul>"},{"location":"AboutThis%20Project/#to-delete-the-virtual-machine","title":"To delete the <code>Virtual machine</code>. <p>Go to folder \"01.Github_Action_DevOps-Project/Terraform_Code_Infra_setup\" and run the terraform command.    - <code>00.Code_IAC-github-repo</code>    - <code>01.Code_IAC_Selfhosted-Runner-and-Trivy</code>    -<code>02.Code_IAC_SonarQube</code>    - <code>03.Code_IAC_Terraform_box</code></p> <pre><code>  ```sh\n  Terraform destroy --auto-approve\n ```\n</code></pre>  <p>\ud83d\udca1 Note: </p>  <p>You must use this command from <code>each folder</code> in order to destroy the entire infrastructure.</p>","text":""},{"location":"AboutThis%20Project/#why-use-this-project","title":"Why Use This Project <ul> <li>Automation: Reduces manual effort in building, testing, and deploying applications.</li> <li>Security: Ensures code and container security through automated scans.</li> <li>Scalability: Deploys applications to scalable Kubernetes clusters.</li> <li>Best Practices: Demonstrates industry-standard CI/CD practices.</li> </ul>","text":""},{"location":"AboutThis%20Project/#conclusion","title":"Conclusion <p>This project provides a comprehensive guide to setting up a CI/CD pipeline using GitHub Actions. By integrating tools like Docker, Trivy, SonarQube, and Terraform, it ensures a secure and efficient software delivery process. The use of AWS CLI and Kubernetes further demonstrates the deployment of applications to cloud-native environments. This project is a valuable resource for DevOps engineers looking to implement modern CI/CD pipelines.</p> <p>Ref Link:</p> <ul> <li>Youtube VideoLink</li> <li>Clearfile-content cache in visualstudio code</li> <li>managing-GitHub-access-tokens</li> <li>GitHub Actions Markget Place</li> <li>download-a-build-artifact</li> <li>upload-a-build-artifact</li> </ul>","text":""},{"location":"Referance/","title":"Referance","text":"<p>Emojis Documents</p> <pre><code> \"editor.fontSize\": 10,\n    \"window.zoomLevel\": 2,\n    \"extensions.ignoreRecommendations\": true,\n    \"terminal.integrated.defaultProfile.osx\": \"zsh\",\n    \"redhat.telemetry.enabled\": true,\n    \"yaml.schemas\": {\n        \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n    },\n    \"yaml.customTags\": [\n        \"!ENV scalar\",\n        \"!ENV sequence\",\n        \"!relative scalar\",\n        \"tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg\",\n        \"tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji\",\n        \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\"\n    ]\n</code></pre>"},{"location":"Referance/#to-enable-venv-for-mkdocs","title":"To Enable venv for MkDocs","text":"<p>\u2705 For Git Bash terminal in VS Code: Open the terminal in VS Code (select Git Bash from the dropdown if it\u2019s not default).</p> <p>Run this command: <pre><code>source venv/Scripts/activate\n</code></pre> \u2705 This should change your prompt to show (venv) \u2014 indicating the virtual environment is active.</p> <p>Steps to activate: Open Command Prompt (cmd) or PowerShell.</p> <p>Navigate to your project directory:</p> <p><pre><code>cd c:\\Z_Test_Repo\\RND\n</code></pre> Then activate the virtual environment:</p> <p>If using Command Prompt: <pre><code>venv\\Scripts\\activate.bat\n</code></pre></p> <p>If using PowerShell: <pre><code>.\\venv\\Scripts\\Activate.ps1\n</code></pre> \ud83d\uded1 PowerShell Execution Policy Gotcha If you get an error like:</p> <p>execution of scripts is disabled on this system</p> <p>You need to temporarily allow script execution:</p> <p><pre><code>Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass\n</code></pre> Then try activating again:</p> <p>```sh .\\venv\\Scripts\\Activate.ps1 ``````</p>"},{"location":"admonitions/","title":"Admonitions","text":"<p>Example of an admonition/callout with a title:</p> <p>Title of the callout</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Title of the callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"code-examples/","title":"This is the content of my Code Examples page.","text":"<p>Here are some examples of code...</p> <p>Example code block for JavaScript with lines highlighted</p> concatenate_scrings.js<pre><code> // Function to concatenate two strings\n function concatenateSting( str1, str 2)\n {\n    return str 1+ str 2;\n }\n</code></pre>"},{"location":"content-tabs/","title":"Content tabs","text":""},{"location":"content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"content-tabs/#generic-content","title":"Generic Content","text":"plain text <p>This is some plain text</p> Unordered list <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> Ordered list <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"content-tabs/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"Python <pre><code>xxxxxxxxxxxxxxxxxxxx\n</code></pre> JavaScript <pre><code>xxxxxxxxxxxxxxxxxxx\n</code></pre>"}]}